<?php

namespace app\controllers;

use app\components\eventer\EventerException;
use app\components\eventer\factories\EventLoggerFactory;
use app\components\eventer\factories\EventReactorFactory;
use app\components\eventer\loggers\LogManager;
use app\components\eventer\rules\RuleException;
use app\components\eventer\rules\RuleManager;
use app\components\eventer\service\Event;
use app\components\pusher\PushManagerException;
use app\components\pusher\Subscription;
use app\components\eventer\Eventer;
use yii\web\Controller;
use yii\data\Pagination;

/** EventerController
 *
 * Class SiteController
 *
 * @package app\controllers
 */
class EventerController extends Controller
{
    /**
     * @inheritdoc
     */
    public function beforeAction($action)
    {
        $this->enableCsrfValidation = false;

        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [];
    }

    /**
     * @inheritdoc
     */
    public function actions()
    {
        return [
            'error' => [
                'class' => 'yii\web\ErrorAction',
            ]
        ];
    }

    /**
     * actionPushevent
     *
     * @TODO
     *
     * @return string
     */
    public function actionPushevent()
    {
        try {
            (new Eventer())
                ->setEvent(\Yii::$app->request->post())
                ->react();

        } catch (EventerException $e) {
            return $e->getMessage();
        }
    }

    /**
     * actionLog
     * @return string
     */
    public function actionLog()
    {

        $logManager = new LogManager(EventLoggerFactory::getEventDbLogger());
        $dataProvider = $logManager->search(\Yii::$app->request->queryParams);
        $dataProvider->pagination->pageSize = 20;

        $this->view->title = 'Логи';

        $params = \Yii::$app->request->queryParams;
        unset($params['page']);
        if ($params) {
            $this->view->title .= ' по фильтру: '.implode(' + ', array_keys(\Yii::$app->request->queryParams));
        };

        return $this->render('log', [
            'dataProvider' => $dataProvider,
        ]);
    }

    /**
     * @return mixed
     */
    public function actionWarn()
    {

        $logManager = new LogManager(EventLoggerFactory::getWarnDbLogger());

        $dataProvider = $logManager->search(\Yii::$app->request->queryParams);
        $dataProvider->pagination->pageSize = 20;

        $this->view->title = 'Предупреждения';

        $params = \Yii::$app->request->queryParams;
        unset($params['page']);
        if ($params) {
            $this->view->title .= ' по фильтру: '.implode(' + ', array_keys(\Yii::$app->request->queryParams));
        };

        return $this->render('log', [
            'dataProvider' => $dataProvider,
        ]);
    }

    /**
     * Displays homepage.
     *
     * @TODO
     *
     * @return string
     */
    public function actionIndex()
    {
        return $this->render('index');
    }

    /**
     * actionRegistersubscription
     *
     * @return string
     */
    public function actionRegistersubscription()
    {
        try {
            (new Subscription())->loadSubscriptionJSON(\Yii::$app->request->post('subscription'))->save();
        } catch (PushManagerException $e) {
            return $e->getMessage();
        }
    }


    public function actionRule($error = null)
    {
        $ruleManager = new RuleManager();

        $post = \Yii::$app->request->post('new_rule', []);

        if (\Yii::$app->request->isPost && $post) {
            try {
                $ruleManager->AddRule($post);
                $post = [];
            } catch (RuleException $e) {
                $error = $e->getMessage();
            }
        }

        return $this->render('rule', [
            'rules' => $ruleManager->getRules(),
            'error' => $error,
            'post' => $post
        ]);
    }

    public function actionDeleterule()
    {
        if (!$id = \Yii::$app->request->get('id')) {
            throw new \Exception('id не передан');
        }

        $error = '';

        $ruleManager = new RuleManager();
        try {
            $ruleManager->deleteRule($id);
        } catch (\Exception $e) {
            $error = $e->getMessage();
        }
        return $this->actionRule($error);
    }
}

